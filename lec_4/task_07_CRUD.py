"""Формирование CRUD

Создадим необходимые маршруты для реализации REST API.

➢Создание пользователя в БД, create
Чтобы создать нового пользователя в таблице «users», мы можем определить
функцию следующим образом:"""

@app.post("/users/", response_model=User)
async def create_user(user: UserIn):
    query = users.insert().values(name=user.name, email=user.email)
    last_record_id = await database.execute(query)
    return {**user.dict(), "id": last_record_id}


"""Мы определяем маршрут "/users/" для создания нового пользователя. В параметре
функции мы ожидаем объект типа UserIn, который содержит имя и email
пользователя. Затем мы создаем SQL-запрос на добавление новой записи в таблицу
"users" с указанными данными. Выполняем запрос и возвращаем данные
созданного пользователя, включая его ID.


➢Чтение пользователей из БД, read
Чтобы прочитать всех пользователей из таблицы «users», мы можем определить
функцию следующим образом:"""


@app.get("/users/", response_model=List[User])
async def read_users():
    query = users.select()
    return await database.fetch_all(query)


"""Мы определяем маршрут "/users/" для чтения всех пользователей. В функции мы
создаем SQL-запрос на выборку всех записей из таблицы "users". Выполняем запрос
и возвращаем полученные данные в виде списка объектов типа User.


➢Чтение одного пользователя из БД, read
Чтобы прочитать одного пользователей из таблицы «users», мы можем определить
функцию следующим образом:"""

@app.get("/users/{user_id}", response_model=User)
async def read_user(user_id: int):
    query = users.select().where(users.c.id == user_id)
    return await database.fetch_one(query)


"""Мы определяем маршрут "/users/{user_id}" для чтения одного пользователя по его
ID. В параметре функции мы ожидаем передачу ID пользователя. Затем мы создаем
SQL-запрос на выборку записи из таблицы "users" с указанным ID. Выполняем
запрос и возвращаем полученные данные в виде объекта типа User.


➢Обновление пользователя в БД, update
Чтобы обновить данные пользователя в таблице «users», мы можем определить
функцию следующим образом:"""


@app.put("/users/{user_id}", response_model=User)
async def update_user(user_id: int, new_user: UserIn):
    query = users.update().where(users.c.id == user_id).values(**new_user.dict())
    await database.execute(query)
    return {**new_user.dict(), "id": user_id}


"""Мы определяем маршрут "/users/{user_id}" для обновления данных пользователя по
его ID. В параметре функции мы ожидаем передачу ID пользователя и объекта типа
UserIn, который содержит новые данные пользователя. Затем мы создаем
SQL-запрос на обновление записи в таблице "users" с указанным ID и новыми
данными. Выполняем запрос и возвращаем обновленные данные пользователя.


➢Удаление пользователя из БД, delete
Чтобы удалить пользователя из таблицы «users», мы можем определить функцию
следующим образом:"""


@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    query = users.delete().where(users.c.id == user_id)
    await database.execute(query)
    return {'message': 'User deleted'}


"""Мы определяем маршрут "/users/{user_id}" для удаления пользователя по его ID. В
параметре функции мы ожидаем передачу ID пользователя. Затем мы создаем
SQL-запрос на удаление записи из таблицы "users" с указанным ID. Выполняем
запрос и возвращаем сообщение об успешном удалении пользователя.



Тестирование операций CRUD

Чтобы протестировать наш API операций CRUD, мы можем использовать такие
инструменты, как Postman или Swagger UI. Мы можем отправлять HTTP-запросы к
нашему API и проверять правильность создания, чтения, обновления и удаления
данных.

Мы можем использовать интерактивную документацию или curl для проверки этих
конечных точек, отправляя HTTP-запросы с соответствующими параметрами.
Например, чтобы создать нового пользователя, мы можем отправить запрос POST
на конечную точку « /users » с данными пользователя в теле запроса.
curl -X 'POST' \
'http://127.0.0.1:8000/users/' \
-H 'accept: application/json' \
-H 'Content-Type: application/json' \
-d '{
"name": "Alex",
"email": "my@mail.ru"
}'

Затем мы можем убедиться, что пользователь был создан в базе данных, отправив
запрос GET на конечную точку « /users » и проверив, что пользователь присутствует
в ответе.

Создание API операций CRUD в FastAPI - это простой процесс. Мы можем
использовать функции и методы Python для выполнения основных функций
создания, чтения, обновления и удаления данных из базы данных. Мы можем
протестировать наш API с помощью таких инструментов, как Postman или Swagger
UI, чтобы убедиться, что он работает правильно.
"""