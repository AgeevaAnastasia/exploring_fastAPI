"""Framework FastAPI — это современный фреймворк для создания веб-приложений
на языке Python. Он был создан с учетом последних тенденций веб-разработки и
имеет ряд преимуществ перед другими фреймворками. FastAPI совсем новый
фреймворк, вышедший в 2018 году. С тех пор он активно развивается, набирает
популярность.


Основные возможности FastAPI

К основным возможностям FastAPI можно отнести следующие:

● Высокая скорость работы благодаря использованию асинхронных функций и
типизации данных.
● Автоматическая генерация документации API на основе аннотаций функций
и моделей данных.
● Встроенная валидация данных запросов и ответов.
● Поддержка OpenAPI и JSON Schema.
● Простота использования благодаря интуитивно понятному синтаксису и
многочисленным примерам.


Сравнение с другими фреймворками

FastAPI имеет ряд преимуществ перед другими популярными фреймворками,
такими как Flask и Django. Он более быстрый благодаря использованию
асинхронных функций, более безопасный благодаря встроенной валидации данных
и поддержке OpenAPI, а также более простой в использовании благодаря
интуитивно понятному синтаксису.


Настройка среды разработки

Рассмотрим процесс настройки среды разработки для работы с FastAPI.


Установка FastAPI

Первым шагом является установка FastAPI. Для этого необходимо использовать
менеджер пакетов pip, который уже устанавливается вместе с Python. Откройте
терминал и выполните следующую команду:

pip install fastapi
Эта команда установит FastAPI и все его зависимости.

Отдельно необходимо установить ASGI сервер для запуска приложения. Один из
вариантов — установка uvicorn.

pip install "uvicorn[standard]"



Настройка FastAPI

Для работы с FastAPI необходимо создать файл приложения и определить конечные
точки API. Для этого можно использовать любой текстовый редактор или
интегрированную среду разработки (IDE).

Пример кода:"""


from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}


"""В этом примере мы создали объект FastAPI и определили конечную точку API с
помощью декоратора @app.get("/"). Декоратор указывает, что это обработчик
GET-запроса по пути "/".

Внутри функции мы возвращаем словарь с сообщением "Hello World". Это
сообщение будет отправлено в ответ на запрос.


Запуск приложения

Для запуска приложения необходимо использовать сервер для запуска приложений
uvicorn. Для этого открываем терминал ОС, переходим в каталог с проектом и
выполняем следующую команду:

uvicorn main:app --reload

Эта команда запустит сервер на локальном хосте по адресу http://127.0.0.1:8000/.

Для остановки сервера нажмите сочетание клавиш Ctrl + C в терминале.


Мы рассмотрели процесс настройки среды разработки для работы с FastAPI.
Установили Fast API и сервер unicorn, создали файл приложения и определили
конечные точки API. Затем мы запустили сервер для запуска приложений uvicorn и
проверили работу приложения в браузере.



Создание базового приложения FastAPI

Рассмотрим процесс создания базового приложения FastAPI. Вы увидите много
общего с Flask.


Создание модуля приложения

Первым шагом является создание модуля приложения. Для этого создайте файл
main.py и импортируйте FastAPI:

from fastapi import FastAPI
app = FastAPI()

В этом примере мы создали объект FastAPI и назвали его app.


Настройка сервера и маршрутизации

Далее необходимо настроить сервер и определить маршрутизацию для нашего
приложения. Для этого создайте функции-обработчики запросов и определите их
маршруты.

@app.get("/")
async def read_root():
    return {"Hello": "World"}"""


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}


"""В этом примере мы определили две функции-обработчика запросов. Первая
функция обрабатывает GET-запрос по корневому пути "/" и возвращает словарь с
сообщением "Hello World". Вторая функция обрабатывает GET-запрос по пути
"/items/{item_id}", где item_id — это переменная пути, а q — это параметр запроса.
Функция возвращает словарь с переданными параметрами.


Запуск приложения и проверка работоспособности

Для запуска приложения необходимо использовать сервер для запуска приложений
uvicorn. Для этого выполните следующую команду:

uvicorn main:app --reload

Эта команда запустит сервер на локальном хосте по адресу http://127.0.0.1:8000/.
Чтобы проверить работоспособность приложения, откройте браузер и перейдите по
адресу http://127.0.0.1:8000/. Вы должны увидеть сообщение "Hello World".

Чтобы проверить работу второй функции, перейдите по адресу
http://127.0.0.1:8000/items/5?q=test, где 5 — это значение переменной item_id, а
test — значение параметра q. Вы должны увидеть словарь с переданными
параметрами.
"""